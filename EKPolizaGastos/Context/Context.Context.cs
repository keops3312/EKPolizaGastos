//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EKPolizaGastos.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SEMP_SATContext : DbContext
    {
        public SEMP_SATContext()
            : base("name=SEMP_SATContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Comprobante> Comprobante { get; set; }
        public virtual DbSet<ComprobanteEstatus> ComprobanteEstatus { get; set; }
        public virtual DbSet<CuentasGastos> CuentasGastos { get; set; }
        public virtual DbSet<Empresas> Empresas { get; set; }
        public virtual DbSet<Localidades> Localidades { get; set; }
        public virtual DbSet<Proveedores> Proveedores { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<CIS_NOV2018> CIS_NOV2018 { get; set; }
        public virtual DbSet<CIS_NOV2018Conceptos> CIS_NOV2018Conceptos { get; set; }
        public virtual DbSet<ComprobanteConceptos> ComprobanteConceptos { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_InsertFactura_Result> SP_InsertFactura(Nullable<int> opcion, string serie, string folio, string fecha, string version, string sello, string formaPago, string noCertificado, string metodoPago, string lugarExpedicion, string schemaLocation, string condicionesDePago, string subTotal, string moneda, string total, string tipoDeComprobante, string descuento, string nombre, string regimenFiscal, string rfc, string nombreR, string rfcR, string usoCFDI, string importe, string impuesto, string tasaOCuota, string tipoFactor, string selloCFD, string noCertificadoSAT, string rfcProvCertif, string uUID, string fechaTimbrado, string selloSAT, string idFactura, string claveProdServ, string noIdentificacion, string cantidad, string claveUnidad, string unidad, string descripcion, string valorUnitario, string importeX, string descuentoX, string nombreTabla, Nullable<System.DateTime> fechaC, ObjectParameter msg, ObjectParameter capto)
        {
            var opcionParameter = opcion.HasValue ?
                new ObjectParameter("opcion", opcion) :
                new ObjectParameter("opcion", typeof(int));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            var folioParameter = folio != null ?
                new ObjectParameter("Folio", folio) :
                new ObjectParameter("Folio", typeof(string));
    
            var fechaParameter = fecha != null ?
                new ObjectParameter("Fecha", fecha) :
                new ObjectParameter("Fecha", typeof(string));
    
            var versionParameter = version != null ?
                new ObjectParameter("Version", version) :
                new ObjectParameter("Version", typeof(string));
    
            var selloParameter = sello != null ?
                new ObjectParameter("Sello", sello) :
                new ObjectParameter("Sello", typeof(string));
    
            var formaPagoParameter = formaPago != null ?
                new ObjectParameter("FormaPago", formaPago) :
                new ObjectParameter("FormaPago", typeof(string));
    
            var noCertificadoParameter = noCertificado != null ?
                new ObjectParameter("NoCertificado", noCertificado) :
                new ObjectParameter("NoCertificado", typeof(string));
    
            var metodoPagoParameter = metodoPago != null ?
                new ObjectParameter("MetodoPago", metodoPago) :
                new ObjectParameter("MetodoPago", typeof(string));
    
            var lugarExpedicionParameter = lugarExpedicion != null ?
                new ObjectParameter("LugarExpedicion", lugarExpedicion) :
                new ObjectParameter("LugarExpedicion", typeof(string));
    
            var schemaLocationParameter = schemaLocation != null ?
                new ObjectParameter("schemaLocation", schemaLocation) :
                new ObjectParameter("schemaLocation", typeof(string));
    
            var condicionesDePagoParameter = condicionesDePago != null ?
                new ObjectParameter("CondicionesDePago", condicionesDePago) :
                new ObjectParameter("CondicionesDePago", typeof(string));
    
            var subTotalParameter = subTotal != null ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var totalParameter = total != null ?
                new ObjectParameter("Total", total) :
                new ObjectParameter("Total", typeof(string));
    
            var tipoDeComprobanteParameter = tipoDeComprobante != null ?
                new ObjectParameter("TipoDeComprobante", tipoDeComprobante) :
                new ObjectParameter("TipoDeComprobante", typeof(string));
    
            var descuentoParameter = descuento != null ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var regimenFiscalParameter = regimenFiscal != null ?
                new ObjectParameter("RegimenFiscal", regimenFiscal) :
                new ObjectParameter("RegimenFiscal", typeof(string));
    
            var rfcParameter = rfc != null ?
                new ObjectParameter("Rfc", rfc) :
                new ObjectParameter("Rfc", typeof(string));
    
            var nombreRParameter = nombreR != null ?
                new ObjectParameter("NombreR", nombreR) :
                new ObjectParameter("NombreR", typeof(string));
    
            var rfcRParameter = rfcR != null ?
                new ObjectParameter("RfcR", rfcR) :
                new ObjectParameter("RfcR", typeof(string));
    
            var usoCFDIParameter = usoCFDI != null ?
                new ObjectParameter("UsoCFDI", usoCFDI) :
                new ObjectParameter("UsoCFDI", typeof(string));
    
            var importeParameter = importe != null ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(string));
    
            var impuestoParameter = impuesto != null ?
                new ObjectParameter("Impuesto", impuesto) :
                new ObjectParameter("Impuesto", typeof(string));
    
            var tasaOCuotaParameter = tasaOCuota != null ?
                new ObjectParameter("TasaOCuota", tasaOCuota) :
                new ObjectParameter("TasaOCuota", typeof(string));
    
            var tipoFactorParameter = tipoFactor != null ?
                new ObjectParameter("TipoFactor", tipoFactor) :
                new ObjectParameter("TipoFactor", typeof(string));
    
            var selloCFDParameter = selloCFD != null ?
                new ObjectParameter("SelloCFD", selloCFD) :
                new ObjectParameter("SelloCFD", typeof(string));
    
            var noCertificadoSATParameter = noCertificadoSAT != null ?
                new ObjectParameter("NoCertificadoSAT", noCertificadoSAT) :
                new ObjectParameter("NoCertificadoSAT", typeof(string));
    
            var rfcProvCertifParameter = rfcProvCertif != null ?
                new ObjectParameter("RfcProvCertif", rfcProvCertif) :
                new ObjectParameter("RfcProvCertif", typeof(string));
    
            var uUIDParameter = uUID != null ?
                new ObjectParameter("UUID", uUID) :
                new ObjectParameter("UUID", typeof(string));
    
            var fechaTimbradoParameter = fechaTimbrado != null ?
                new ObjectParameter("FechaTimbrado", fechaTimbrado) :
                new ObjectParameter("FechaTimbrado", typeof(string));
    
            var selloSATParameter = selloSAT != null ?
                new ObjectParameter("SelloSAT", selloSAT) :
                new ObjectParameter("SelloSAT", typeof(string));
    
            var idFacturaParameter = idFactura != null ?
                new ObjectParameter("IdFactura", idFactura) :
                new ObjectParameter("IdFactura", typeof(string));
    
            var claveProdServParameter = claveProdServ != null ?
                new ObjectParameter("ClaveProdServ", claveProdServ) :
                new ObjectParameter("ClaveProdServ", typeof(string));
    
            var noIdentificacionParameter = noIdentificacion != null ?
                new ObjectParameter("NoIdentificacion", noIdentificacion) :
                new ObjectParameter("NoIdentificacion", typeof(string));
    
            var cantidadParameter = cantidad != null ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(string));
    
            var claveUnidadParameter = claveUnidad != null ?
                new ObjectParameter("ClaveUnidad", claveUnidad) :
                new ObjectParameter("ClaveUnidad", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var valorUnitarioParameter = valorUnitario != null ?
                new ObjectParameter("ValorUnitario", valorUnitario) :
                new ObjectParameter("ValorUnitario", typeof(string));
    
            var importeXParameter = importeX != null ?
                new ObjectParameter("ImporteX", importeX) :
                new ObjectParameter("ImporteX", typeof(string));
    
            var descuentoXParameter = descuentoX != null ?
                new ObjectParameter("DescuentoX", descuentoX) :
                new ObjectParameter("DescuentoX", typeof(string));
    
            var nombreTablaParameter = nombreTabla != null ?
                new ObjectParameter("nombreTabla", nombreTabla) :
                new ObjectParameter("nombreTabla", typeof(string));
    
            var fechaCParameter = fechaC.HasValue ?
                new ObjectParameter("FechaC", fechaC) :
                new ObjectParameter("FechaC", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsertFactura_Result>("SP_InsertFactura", opcionParameter, serieParameter, folioParameter, fechaParameter, versionParameter, selloParameter, formaPagoParameter, noCertificadoParameter, metodoPagoParameter, lugarExpedicionParameter, schemaLocationParameter, condicionesDePagoParameter, subTotalParameter, monedaParameter, totalParameter, tipoDeComprobanteParameter, descuentoParameter, nombreParameter, regimenFiscalParameter, rfcParameter, nombreRParameter, rfcRParameter, usoCFDIParameter, importeParameter, impuestoParameter, tasaOCuotaParameter, tipoFactorParameter, selloCFDParameter, noCertificadoSATParameter, rfcProvCertifParameter, uUIDParameter, fechaTimbradoParameter, selloSATParameter, idFacturaParameter, claveProdServParameter, noIdentificacionParameter, cantidadParameter, claveUnidadParameter, unidadParameter, descripcionParameter, valorUnitarioParameter, importeXParameter, descuentoXParameter, nombreTablaParameter, fechaCParameter, msg, capto);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
